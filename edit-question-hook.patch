diff --git a/edit-question-hook.patch b/edit-question-hook.patch
new file mode 100644
index 00000000000..4d091e09d25
--- /dev/null
+++ b/edit-question-hook.patch
@@ -0,0 +1,578 @@
+diff --git a/question/bank/customfields/classes/local/hooks/question_edit_extensions.php b/question/bank/customfields/classes/local/hooks/question_edit_extensions.php
+new file mode 100644
+index 00000000000..dd675d0a2a0
+--- /dev/null
++++ b/question/bank/customfields/classes/local/hooks/question_edit_extensions.php
+@@ -0,0 +1,120 @@
++<?php
++// This file is part of Moodle - http://moodle.org/
++//
++// Moodle is free software: you can redistribute it and/or modify
++// it under the terms of the GNU General Public License as published by
++// the Free Software Foundation, either version 3 of the License, or
++// (at your option) any later version.
++//
++// Moodle is distributed in the hope that it will be useful,
++// but WITHOUT ANY WARRANTY; without even the implied warranty of
++// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
++// GNU General Public License for more details.
++//
++// You should have received a copy of the GNU General Public License
++// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
++
++/**
++ * Meta sync enrolments task.
++ *
++ * @package   qbank_customfields
++ * @author    Enrique Castro <@ULPGC>
++ * @copyright 2024 Enrique Castro
++ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
++ */
++
++namespace qbank_customfields\local\hooks;
++
++use core_question\hook\after_form_definition;
++use core_question\hook\after_form_definition_after_data;
++use core_question\hook\after_form_submission;
++use core_question\hook\after_form_validation;
++use qbank_customfields\customfield\question_handler;
++
++/**
++ * Meta sync enrolments task.
++ *
++ * @package   qbank_customfields
++ * @copyright 2024 Enrique Castro, ULPGC
++ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
++ */
++class question_edit_extensions {
++
++    /**
++     * Callback to add form elements.
++     *
++     * @param \core_question\hook\after_form_definition $hook
++     */
++    public static function instance_form_definition(after_form_definition $hook): void {
++
++        if (!\core\plugininfo\qbank::is_plugin_enabled('qbank_customfields')) {
++            return;
++        }
++
++        $mform = $hook->mform;
++        $question = $hook->formwrapper->get_question();
++
++        $handler = question_handler::create();
++        $handler->instance_form_definition($mform, empty($question->id) ? 0 : $question->id);
++    }
++
++    /**
++     * Callback to set data in form fields and complete definition.
++     *
++     * @param \core_question\hook\after_form_definition_after_data $hook
++     */
++    public static function instance_form_definition_after_data(after_form_definition_after_data $hook): void {
++
++        if (!\core\plugininfo\qbank::is_plugin_enabled('qbank_customfields')) {
++            return;
++        }
++
++        $question = $hook->formwrapper->get_question();
++        $handler = question_handler::create();
++
++        $toform = fullclone($question);
++        $handler->instance_form_before_set_data($toform);
++
++        $hook->formwrapper->set_data($toform);
++
++        $handler->instance_form_definition_after_data($hook->mform,
++                                                        empty($question->id) ? 0 : $question->id);
++    }
++
++    /**
++     * Callback to save form elements values.
++     *
++     * @param \core_question\hook\after_form_submission $hook
++     */
++    public static function instance_form_save(after_form_submission $hook): void {
++
++        if (!\core\plugininfo\qbank::is_plugin_enabled('qbank_customfields')) {
++            return;
++        }
++
++        $data = $hook->get_data();
++
++        $handler = question_handler::create();
++        $handler->instance_form_save($data);
++    }
++
++    /**
++     * Callback to validate form elements and identify errors.
++     *
++     * @param \core_question\hook\after_form_validation $hook
++     */
++    public static function instance_form_validation(after_form_validation $hook): void {
++
++        if (!\core\plugininfo\qbank::is_plugin_enabled('qbank_customfields')) {
++            return;
++        }
++
++        $handler = question_handler::create();
++        // Add the custom field validation.
++        $errors = $handler->instance_form_validation($hook->get_data(), $hook->get_files());
++
++        if(!empty($errors)) {
++            $hook->add_errors($errors);
++        }
++   }
++}
+diff --git a/question/bank/customfields/db/hooks.php b/question/bank/customfields/db/hooks.php
+new file mode 100644
+index 00000000000..d9feb08f4f5
+--- /dev/null
++++ b/question/bank/customfields/db/hooks.php
+@@ -0,0 +1,51 @@
++<?php
++// This file is part of Moodle - http://moodle.org/
++//
++// Moodle is free software: you can redistribute it and/or modify
++// it under the terms of the GNU General Public License as published by
++// the Free Software Foundation, either version 3 of the License, or
++// (at your option) any later version.
++//
++// Moodle is distributed in the hope that it will be useful,
++// but WITHOUT ANY WARRANTY; without even the implied warranty of
++// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
++// GNU General Public License for more details.
++//
++// You should have received a copy of the GNU General Public License
++// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
++
++/**
++ * Hook callbacks for Moodle app tools
++ *
++ * @package    qbank_customfields
++ * @copyright  2024 Enrique Castro, ULPGC
++ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
++ */
++
++defined('MOODLE_INTERNAL') || die();
++
++$callbacks = [
++    [
++        'hook' => core_question\hook\after_form_definition::class,
++        'callback' => 'qbank_customfields\local\hooks\question_edit_extensions::instance_form_definition',
++        'priority' => 100,
++    ],
++
++    [
++        'hook' => core_question\hook\after_form_definition_after_data::class,
++        'callback' => 'qbank_customfields\local\hooks\question_edit_extensions::instance_form_definition_after_data',
++        'priority' => 100,
++    ],
++
++    [
++        'hook' => core_question\hook\after_form_submission::class,
++        'callback' => 'qbank_customfields\local\hooks\question_edit_extensions::instance_form_save',
++        'priority' => 100,
++    ],
++
++    [
++        'hook' => core_question\hook\after_form_validation::class,
++        'callback' => 'qbank_customfields\local\hooks\question_edit_extensions::instance_form_validation',
++        'priority' => 100,
++    ],
++];
+diff --git a/question/bank/editquestion/question.php b/question/bank/editquestion/question.php
+index ee2efa87487..e2bfa28e721 100644
+--- a/question/bank/editquestion/question.php
++++ b/question/bank/editquestion/question.php
+@@ -232,10 +232,6 @@ if ($cm !== null) {
+ 
+ $toform->inpopup = $inpopup;
+ 
+-// Prepare custom fields data.
+-$customfieldhandler = qbank_customfields\customfield\question_handler::create();
+-$customfieldhandler->instance_form_before_set_data($toform);
+-
+ $mform->set_data($toform);
+ 
+ if ($mform->is_cancelled()) {
+@@ -287,8 +283,10 @@ if ($mform->is_cancelled()) {
+         }
+     }
+ 
+-    // If this is a new question and question defaults save is enabled, save defaults for user in user_preferences table.
+-    if (empty($question->id) && !empty($CFG->questiondefaultssave)) {
++    // If this is a new question, save defaults for user in user_preferences table.
++    $isnewquestion = false;   
++    if (empty($question->id)) {
++        $isnewquestion = true;
+         $qtypeobj->save_defaults_for_new_questions($fromform);
+     }
+     $question = $qtypeobj->save_question($question, $fromform);
+@@ -304,8 +302,8 @@ if ($mform->is_cancelled()) {
+                 context_course::instance($fromform->courseid), $fromform->coursetags, 0);
+     }
+ 
+-    // Update custom fields if there are any of them in the form.
+-    $customfieldhandler->instance_form_save($fromform);
++    $hook = new \core_question\hook\after_form_submission($fromform, $isnewquestion);
++    \core\di::get(\core\hook\manager::class)->dispatch($hook);
+ 
+     // Purge this question from the cache.
+     question_bank::notify_question_edited($question->id);
+diff --git a/question/classes/hook/after_form_definition.php b/question/classes/hook/after_form_definition.php
+new file mode 100644
+index 00000000000..112cd6f50e7
+--- /dev/null
++++ b/question/classes/hook/after_form_definition.php
+@@ -0,0 +1,45 @@
++<?php
++// This file is part of Moodle - http://moodle.org/
++//
++// Moodle is free software: you can redistribute it and/or modify
++// it under the terms of the GNU General Public License as published by
++// the Free Software Foundation, either version 3 of the License, or
++// (at your option) any later version.
++//
++// Moodle is distributed in the hope that it will be useful,
++// but WITHOUT ANY WARRANTY; without even the implied warranty of
++// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
++// GNU General Public License for more details.
++//
++// You should have received a copy of the GNU General Public License
++// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
++
++namespace core_question\hook;
++
++use question_edit_form;
++use MoodleQuickForm;
++
++/**
++ * Allows plugins to extend question form definition and add/remove/update form elements.
++ *
++ * @see question_edit_form::definition()
++ *
++ * @package    core_question
++ * @copyright  2024 Enrique Castro, ULPGC
++ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
++ */
++class after_form_definition {
++    /**
++     * Creates new hook.
++     *
++     * @param question_edit_form $formwrapper Course form wrapper.
++     * @param MoodleQuickForm $mform Form to be extended.
++     */
++    public function __construct(
++        /** @var question_edit_form The form wrapper for the edit form */
++        public readonly question_edit_form $formwrapper,
++        /** @var MoodlequickForm The form to be extended */
++        public readonly MoodleQuickForm $mform,
++    ) {
++    }
++}
+diff --git a/question/classes/hook/after_form_definition_after_data.php b/question/classes/hook/after_form_definition_after_data.php
+new file mode 100644
+index 00000000000..317289474e1
+--- /dev/null
++++ b/question/classes/hook/after_form_definition_after_data.php
+@@ -0,0 +1,45 @@
++<?php
++// This file is part of Moodle - http://moodle.org/
++//
++// Moodle is free software: you can redistribute it and/or modify
++// it under the terms of the GNU General Public License as published by
++// the Free Software Foundation, either version 3 of the License, or
++// (at your option) any later version.
++//
++// Moodle is distributed in the hope that it will be useful,
++// but WITHOUT ANY WARRANTY; without even the implied warranty of
++// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
++// GNU General Public License for more details.
++//
++// You should have received a copy of the GNU General Public License
++// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
++
++namespace core_question\hook;
++
++use question_edit_form;
++use MoodleQuickForm;
++
++/**
++ * Allows plugins to extend question form after data is set.
++ *
++ * @see question_edit_form::definition_after_data()
++ *
++ * @package    core_question
++ * @copyright  2024 Enrique Castro, ULPGC
++ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
++ */
++class after_form_definition_after_data {
++    /**
++     * Creates new hook.
++     *
++     * @param question_edit_form $formwrapper Course form wrapper..
++     * @param MoodleQuickForm $mform Form to be extended.
++     */
++    public function __construct(
++        /** @var question_edit_form The form wrapper for the edit form */
++        public readonly question_edit_form $formwrapper,
++        /** @var MoodlequickForm The form to be extended */
++        public readonly MoodleQuickForm $mform,
++    ) {
++    }
++}
+diff --git a/question/classes/hook/after_form_submission.php b/question/classes/hook/after_form_submission.php
+new file mode 100644
+index 00000000000..c5eec26659a
+--- /dev/null
++++ b/question/classes/hook/after_form_submission.php
+@@ -0,0 +1,49 @@
++<?php
++// This file is part of Moodle - http://moodle.org/
++//
++// Moodle is free software: you can redistribute it and/or modify
++// it under the terms of the GNU General Public License as published by
++// the Free Software Foundation, either version 3 of the License, or
++// (at your option) any later version.
++//
++// Moodle is distributed in the hope that it will be useful,
++// but WITHOUT ANY WARRANTY; without even the implied warranty of
++// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
++// GNU General Public License for more details.
++//
++// You should have received a copy of the GNU General Public License
++// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
++
++namespace core_question\hook;
++
++/**
++ * Allows plugins to extend question form submission.
++ *
++ * @package    core_question
++ * @copyright  2024 Enrique Castro, ULPGC
++ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
++ */
++class after_form_submission {
++    /**
++     * Creates new hook.
++     *
++     * @param \stdClass $data Submitted data
++     * @param bool $isnewcourse Whether this is a new course
++     */
++    public function __construct(
++        /** @var \stdClass The submitted data */
++        protected \stdClass $data,
++        /** @var bool Whether this is a new question */
++        public readonly bool $isnewquestion = false,
++    ) {
++    }
++
++    /**
++     * Returns submitted data.
++     *
++     * @return stdClass
++     */
++    public function get_data(): \stdClass {
++        return $this->data;
++    }
++}
+diff --git a/question/classes/hook/after_form_validation.php b/question/classes/hook/after_form_validation.php
+new file mode 100644
+index 00000000000..286e9f60553
+--- /dev/null
++++ b/question/classes/hook/after_form_validation.php
+@@ -0,0 +1,90 @@
++<?php
++// This file is part of Moodle - http://moodle.org/
++//
++// Moodle is free software: you can redistribute it and/or modify
++// it under the terms of the GNU General Public License as published by
++// the Free Software Foundation, either version 3 of the License, or
++// (at your option) any later version.
++//
++// Moodle is distributed in the hope that it will be useful,
++// but WITHOUT ANY WARRANTY; without even the implied warranty of
++// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
++// GNU General Public License for more details.
++//
++// You should have received a copy of the GNU General Public License
++// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
++
++namespace core_question\hook;
++
++use question_edit_form;
++
++/**
++ * Allows plugins to extend question form validation.
++ *
++ * @see question_edit_form::validation()
++ *
++ * @package    core_question
++ * @copyright  2024 Enrique Castro, ULPGC
++ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
++ */
++class after_form_validation {
++    /**
++     * Plugin errors.
++     *
++     * @var array
++     */
++    protected $errors = [];
++
++    /**
++     * Creates new hook.
++     *
++     * @param question_edit_form $formwrapper Course form wrapper..
++     * @param array $data Submitted data.
++     * @param array $files Submitted files.
++     */
++    public function __construct(
++        /** @var question_edit_form Course form wrapper */
++        public readonly question_edit_form $formwrapper,
++        /** @var array The submitted data */
++        private array $data,
++        /** @var array Submitted files */
++        private array $files = [],
++    ) {
++    }
++
++    /**
++     * Returns submitted data.
++     *
++     * @return array
++     */
++    public function get_data(): array {
++        return $this->data;
++    }
++
++    /**
++     * Returns submitted files.
++     *
++     * @return array
++     */
++    public function get_files(): array {
++        return $this->files;
++    }
++
++    /**
++     * Return plugin generated errors.
++     *
++     * @return array
++     */
++    public function get_errors(): array {
++        return $this->errors;
++    }
++
++    /**
++     * Plugins implementing a callback can add validation errors.
++     *
++     * @param array $errors Validation errors generated by a plugin.
++     */
++    public function add_errors(array $errors): void {
++        $this->errors = array_merge($this->errors, $errors);
++    }
++}
+diff --git a/question/type/edit_question_form.php b/question/type/edit_question_form.php
+index 532fb387ab7..232db77ebe5 100644
+--- a/question/type/edit_question_form.php
++++ b/question/type/edit_question_form.php
+@@ -92,10 +92,6 @@ abstract class question_edit_form extends question_wizard_form {
+     public $fileoptions;
+     /** @var object instance of question type */
+     public $instance;
+-    /** @var object instance of custom field */
+-    protected $customfieldhandler;
+-    /** @var bool custom field plugin enabled or disabled*/
+-    protected $customfieldpluginenabled = true;
+ 
+     public function __construct($submiturl, $question, $category, $contexts, $formeditable = true) {
+         global $DB;
+@@ -121,10 +117,6 @@ abstract class question_edit_form extends question_wizard_form {
+         $this->category = $category;
+         $this->categorycontext = context::instance_by_id($category->contextid);
+ 
+-        if (!\core\plugininfo\qbank::is_plugin_enabled('qbank_customfields')) {
+-            $this->customfieldpluginenabled = false;
+-        }
+-
+         parent::__construct($submiturl, null, 'post', '', ['data-qtype' => $this->qtype()], $formeditable);
+     }
+ 
+@@ -265,12 +257,8 @@ abstract class question_edit_form extends question_wizard_form {
+             $this->add_tag_fields($mform);
+         }
+ 
+-        if ($this->customfieldpluginenabled) {
+-            // Add custom fields to the form.
+-            $this->customfieldhandler = qbank_customfields\customfield\question_handler::create();
+-            $this->customfieldhandler->set_parent_context($this->categorycontext); // For question handler only.
+-            $this->customfieldhandler->instance_form_definition($mform, empty($this->question->id) ? 0 : $this->question->id);
+-        }
++        $hook = new \core_question\hook\after_form_definition($this, $mform);
++        \core\di::get(\core\hook\manager::class)->dispatch($hook);
+ 
+         $this->add_hidden_fields();
+ 
+@@ -316,10 +304,9 @@ abstract class question_edit_form extends question_wizard_form {
+      */
+     public function definition_after_data() {
+         $mform = $this->_form;
+-        if ($this->customfieldpluginenabled) {
+-            $this->customfieldhandler->instance_form_definition_after_data($mform,
+-                empty($this->question->id) ? 0 : $this->question->id);
+-        }
++
++        $hook = new \core_question\hook\after_form_definition_after_data($this, $mform);
++        \core\di::get(\core\hook\manager::class)->dispatch($hook);
+     }
+ 
+     /**
+@@ -901,10 +888,13 @@ abstract class question_edit_form extends question_wizard_form {
+             }
+         }
+ 
+-        if ($this->customfieldpluginenabled) {
+-            // Add the custom field validation.
+-            $errors  = array_merge($errors, $this->customfieldhandler->instance_form_validation($fromform, $files));
++        $hook = new \core_question\hook\after_form_validation($this, $fromform, $files);
++        \core\di::get(\core\hook\manager::class)->dispatch($hook);
++        $pluginerrors = $hook->get_errors();
++        if (!empty($pluginerrors)) {
++            $errors = array_merge($errors, $pluginerrors);
+         }
++
+         return $errors;
+     }
+ 
+@@ -925,4 +915,30 @@ abstract class question_edit_form extends question_wizard_form {
+         return $this->editoroptions;
+     }
+ 
++    /**
++     * Returns contexts related to the question edited
++     *
++     * @return \core_question\local\bank\question_edit_contexts
++     */
++    public function get_contexts(): \core_question\local\bank\question_edit_contexts {
++        return $this->contexts;
++    }
++
++    /**
++     * Returns question object.
++     *
++     * @return \StdClass
++     */
++    public function get_question(): \StdClass {
++        return $this->question;
++    }
++
++    /**
++     * Returns form category object.
++     *
++     * @return \StdClass
++     */
++    public function get_category(): \StdClass {
++        return $this->category;
++    }
+ }
diff --git a/question/bank/customfields/classes/local/hooks/question_edit_extensions.php b/question/bank/customfields/classes/local/hooks/question_edit_extensions.php
new file mode 100644
index 00000000000..6c9fdb5fe00
--- /dev/null
+++ b/question/bank/customfields/classes/local/hooks/question_edit_extensions.php
@@ -0,0 +1,122 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Hook callbacks class for question customfields.
+ *
+ * @package   qbank_customfields
+ * @author    Enrique Castro <@ULPGC>
+ * @copyright 2024 Enrique Castro
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace qbank_customfields\local\hooks;
+
+use core_question\hook\after_form_definition;
+use core_question\hook\after_form_definition_after_data;
+use core_question\hook\after_form_submission;
+use core_question\hook\after_form_validation;
+use qbank_customfields\customfield\question_handler;
+
+/**
+ * Hook callbacks class for question customfields
+ * Allows customfield to add elements to the question edit form.
+ * The callback is executed and form elements are added/processed
+ * only when qbank_customfields plugin is enabled
+ *
+ * @package   qbank_customfields
+ * @copyright 2024 Enrique Castro, ULPGC
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class question_edit_extensions {
+
+    /**
+     * Callback to add form elements.
+     *
+     * @param \core_question\hook\after_form_definition $hook
+     */
+    public static function instance_form_definition(after_form_definition $hook): void {
+
+        if (!\core\plugininfo\qbank::is_plugin_enabled('qbank_customfields')) {
+            return;
+        }
+
+        $mform = $hook->mform;
+        $question = $hook->formwrapper->get_question();
+
+        $handler = question_handler::create();
+        $handler->instance_form_definition($mform, empty($question->id) ? 0 : $question->id);
+    }
+
+    /**
+     * Callback to set data in form fields and complete definition.
+     *
+     * @param \core_question\hook\after_form_definition_after_data $hook
+     */
+    public static function instance_form_definition_after_data(after_form_definition_after_data $hook): void {
+
+        if (!\core\plugininfo\qbank::is_plugin_enabled('qbank_customfields')) {
+            return;
+        }
+
+        $question = $hook->formwrapper->get_question();
+        $handler = question_handler::create();
+
+        $toform = fullclone($question);
+        $handler->instance_form_before_set_data($toform);
+
+        $hook->formwrapper->set_data($toform);
+
+        $handler->instance_form_definition_after_data($hook->mform, empty($question->id) ? 0 : $question->id);
+    }
+
+    /**
+     * Callback to save form elements values.
+     *
+     * @param \core_question\hook\after_form_submission $hook
+     */
+    public static function instance_form_save(after_form_submission $hook): void {
+
+        if (!\core\plugininfo\qbank::is_plugin_enabled('qbank_customfields')) {
+            return;
+        }
+
+        $data = $hook->get_data();
+
+        $handler = question_handler::create();
+        $handler->instance_form_save($data);
+    }
+
+    /**
+     * Callback to validate form elements and identify errors.
+     *
+     * @param \core_question\hook\after_form_validation $hook
+     */
+    public static function instance_form_validation(after_form_validation $hook): void {
+
+        if (!\core\plugininfo\qbank::is_plugin_enabled('qbank_customfields')) {
+            return;
+        }
+
+        $handler = question_handler::create();
+        // Add the custom field validation.
+        $errors = $handler->instance_form_validation($hook->get_data(), $hook->get_files());
+
+        if(!empty($errors)) {
+            $hook->add_errors($errors);
+        }
+   }
+}
diff --git a/question/bank/customfields/db/hooks.php b/question/bank/customfields/db/hooks.php
new file mode 100644
index 00000000000..39b5303727a
--- /dev/null
+++ b/question/bank/customfields/db/hooks.php
@@ -0,0 +1,52 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Hook callbacks for question customfields
+ * Allows customfield to add elements to the question edit form.
+ *
+ * @package    qbank_customfields
+ * @copyright  2024 Enrique Castro, ULPGC
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+$callbacks = [
+    [
+        'hook' => core_question\hook\after_form_definition::class,
+        'callback' => 'qbank_customfields\local\hooks\question_edit_extensions::instance_form_definition',
+        'priority' => 100,
+    ],
+
+    [
+        'hook' => core_question\hook\after_form_definition_after_data::class,
+        'callback' => 'qbank_customfields\local\hooks\question_edit_extensions::instance_form_definition_after_data',
+        'priority' => 100,
+    ],
+
+    [
+        'hook' => core_question\hook\after_form_submission::class,
+        'callback' => 'qbank_customfields\local\hooks\question_edit_extensions::instance_form_save',
+        'priority' => 100,
+    ],
+
+    [
+        'hook' => core_question\hook\after_form_validation::class,
+        'callback' => 'qbank_customfields\local\hooks\question_edit_extensions::instance_form_validation',
+        'priority' => 100,
+    ],
+];
diff --git a/question/bank/editquestion/question.php b/question/bank/editquestion/question.php
index ee2efa87487..e2bfa28e721 100644
--- a/question/bank/editquestion/question.php
+++ b/question/bank/editquestion/question.php
@@ -232,10 +232,6 @@ if ($cm !== null) {
 
 $toform->inpopup = $inpopup;
 
-// Prepare custom fields data.
-$customfieldhandler = qbank_customfields\customfield\question_handler::create();
-$customfieldhandler->instance_form_before_set_data($toform);
-
 $mform->set_data($toform);
 
 if ($mform->is_cancelled()) {
@@ -287,8 +283,10 @@ if ($mform->is_cancelled()) {
         }
     }
 
-    // If this is a new question and question defaults save is enabled, save defaults for user in user_preferences table.
-    if (empty($question->id) && !empty($CFG->questiondefaultssave)) {
+    // If this is a new question, save defaults for user in user_preferences table.
+    $isnewquestion = false;   
+    if (empty($question->id)) {
+        $isnewquestion = true;
         $qtypeobj->save_defaults_for_new_questions($fromform);
     }
     $question = $qtypeobj->save_question($question, $fromform);
@@ -304,8 +302,8 @@ if ($mform->is_cancelled()) {
                 context_course::instance($fromform->courseid), $fromform->coursetags, 0);
     }
 
-    // Update custom fields if there are any of them in the form.
-    $customfieldhandler->instance_form_save($fromform);
+    $hook = new \core_question\hook\after_form_submission($fromform, $isnewquestion);
+    \core\di::get(\core\hook\manager::class)->dispatch($hook);
 
     // Purge this question from the cache.
     question_bank::notify_question_edited($question->id);
diff --git a/question/classes/hook/after_form_definition.php b/question/classes/hook/after_form_definition.php
new file mode 100644
index 00000000000..112cd6f50e7
--- /dev/null
+++ b/question/classes/hook/after_form_definition.php
@@ -0,0 +1,45 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+namespace core_question\hook;
+
+use question_edit_form;
+use MoodleQuickForm;
+
+/**
+ * Allows plugins to extend question form definition and add/remove/update form elements.
+ *
+ * @see question_edit_form::definition()
+ *
+ * @package    core_question
+ * @copyright  2024 Enrique Castro, ULPGC
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class after_form_definition {
+    /**
+     * Creates new hook.
+     *
+     * @param question_edit_form $formwrapper Course form wrapper.
+     * @param MoodleQuickForm $mform Form to be extended.
+     */
+    public function __construct(
+        /** @var question_edit_form The form wrapper for the edit form */
+        public readonly question_edit_form $formwrapper,
+        /** @var MoodlequickForm The form to be extended */
+        public readonly MoodleQuickForm $mform,
+    ) {
+    }
+}
diff --git a/question/classes/hook/after_form_definition_after_data.php b/question/classes/hook/after_form_definition_after_data.php
new file mode 100644
index 00000000000..317289474e1
--- /dev/null
+++ b/question/classes/hook/after_form_definition_after_data.php
@@ -0,0 +1,45 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+namespace core_question\hook;
+
+use question_edit_form;
+use MoodleQuickForm;
+
+/**
+ * Allows plugins to extend question form after data is set.
+ *
+ * @see question_edit_form::definition_after_data()
+ *
+ * @package    core_question
+ * @copyright  2024 Enrique Castro, ULPGC
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class after_form_definition_after_data {
+    /**
+     * Creates new hook.
+     *
+     * @param question_edit_form $formwrapper Course form wrapper..
+     * @param MoodleQuickForm $mform Form to be extended.
+     */
+    public function __construct(
+        /** @var question_edit_form The form wrapper for the edit form */
+        public readonly question_edit_form $formwrapper,
+        /** @var MoodlequickForm The form to be extended */
+        public readonly MoodleQuickForm $mform,
+    ) {
+    }
+}
diff --git a/question/classes/hook/after_form_submission.php b/question/classes/hook/after_form_submission.php
new file mode 100644
index 00000000000..c5eec26659a
--- /dev/null
+++ b/question/classes/hook/after_form_submission.php
@@ -0,0 +1,49 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+namespace core_question\hook;
+
+/**
+ * Allows plugins to extend question form submission.
+ *
+ * @package    core_question
+ * @copyright  2024 Enrique Castro, ULPGC
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class after_form_submission {
+    /**
+     * Creates new hook.
+     *
+     * @param \stdClass $data Submitted data
+     * @param bool $isnewcourse Whether this is a new course
+     */
+    public function __construct(
+        /** @var \stdClass The submitted data */
+        protected \stdClass $data,
+        /** @var bool Whether this is a new question */
+        public readonly bool $isnewquestion = false,
+    ) {
+    }
+
+    /**
+     * Returns submitted data.
+     *
+     * @return stdClass
+     */
+    public function get_data(): \stdClass {
+        return $this->data;
+    }
+}
diff --git a/question/classes/hook/after_form_validation.php b/question/classes/hook/after_form_validation.php
new file mode 100644
index 00000000000..286e9f60553
--- /dev/null
+++ b/question/classes/hook/after_form_validation.php
@@ -0,0 +1,90 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+namespace core_question\hook;
+
+use question_edit_form;
+
+/**
+ * Allows plugins to extend question form validation.
+ *
+ * @see question_edit_form::validation()
+ *
+ * @package    core_question
+ * @copyright  2024 Enrique Castro, ULPGC
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class after_form_validation {
+    /**
+     * Plugin errors.
+     *
+     * @var array
+     */
+    protected $errors = [];
+
+    /**
+     * Creates new hook.
+     *
+     * @param question_edit_form $formwrapper Course form wrapper..
+     * @param array $data Submitted data.
+     * @param array $files Submitted files.
+     */
+    public function __construct(
+        /** @var question_edit_form Course form wrapper */
+        public readonly question_edit_form $formwrapper,
+        /** @var array The submitted data */
+        private array $data,
+        /** @var array Submitted files */
+        private array $files = [],
+    ) {
+    }
+
+    /**
+     * Returns submitted data.
+     *
+     * @return array
+     */
+    public function get_data(): array {
+        return $this->data;
+    }
+
+    /**
+     * Returns submitted files.
+     *
+     * @return array
+     */
+    public function get_files(): array {
+        return $this->files;
+    }
+
+    /**
+     * Return plugin generated errors.
+     *
+     * @return array
+     */
+    public function get_errors(): array {
+        return $this->errors;
+    }
+
+    /**
+     * Plugins implementing a callback can add validation errors.
+     *
+     * @param array $errors Validation errors generated by a plugin.
+     */
+    public function add_errors(array $errors): void {
+        $this->errors = array_merge($this->errors, $errors);
+    }
+}
diff --git a/question/type/edit_question_form.php b/question/type/edit_question_form.php
index 532fb387ab7..232db77ebe5 100644
--- a/question/type/edit_question_form.php
+++ b/question/type/edit_question_form.php
@@ -92,10 +92,6 @@ abstract class question_edit_form extends question_wizard_form {
     public $fileoptions;
     /** @var object instance of question type */
     public $instance;
-    /** @var object instance of custom field */
-    protected $customfieldhandler;
-    /** @var bool custom field plugin enabled or disabled*/
-    protected $customfieldpluginenabled = true;
 
     public function __construct($submiturl, $question, $category, $contexts, $formeditable = true) {
         global $DB;
@@ -121,10 +117,6 @@ abstract class question_edit_form extends question_wizard_form {
         $this->category = $category;
         $this->categorycontext = context::instance_by_id($category->contextid);
 
-        if (!\core\plugininfo\qbank::is_plugin_enabled('qbank_customfields')) {
-            $this->customfieldpluginenabled = false;
-        }
-
         parent::__construct($submiturl, null, 'post', '', ['data-qtype' => $this->qtype()], $formeditable);
     }
 
@@ -265,12 +257,8 @@ abstract class question_edit_form extends question_wizard_form {
             $this->add_tag_fields($mform);
         }
 
-        if ($this->customfieldpluginenabled) {
-            // Add custom fields to the form.
-            $this->customfieldhandler = qbank_customfields\customfield\question_handler::create();
-            $this->customfieldhandler->set_parent_context($this->categorycontext); // For question handler only.
-            $this->customfieldhandler->instance_form_definition($mform, empty($this->question->id) ? 0 : $this->question->id);
-        }
+        $hook = new \core_question\hook\after_form_definition($this, $mform);
+        \core\di::get(\core\hook\manager::class)->dispatch($hook);
 
         $this->add_hidden_fields();
 
@@ -316,10 +304,9 @@ abstract class question_edit_form extends question_wizard_form {
      */
     public function definition_after_data() {
         $mform = $this->_form;
-        if ($this->customfieldpluginenabled) {
-            $this->customfieldhandler->instance_form_definition_after_data($mform,
-                empty($this->question->id) ? 0 : $this->question->id);
-        }
+
+        $hook = new \core_question\hook\after_form_definition_after_data($this, $mform);
+        \core\di::get(\core\hook\manager::class)->dispatch($hook);
     }
 
     /**
@@ -901,10 +888,13 @@ abstract class question_edit_form extends question_wizard_form {
             }
         }
 
-        if ($this->customfieldpluginenabled) {
-            // Add the custom field validation.
-            $errors  = array_merge($errors, $this->customfieldhandler->instance_form_validation($fromform, $files));
+        $hook = new \core_question\hook\after_form_validation($this, $fromform, $files);
+        \core\di::get(\core\hook\manager::class)->dispatch($hook);
+        $pluginerrors = $hook->get_errors();
+        if (!empty($pluginerrors)) {
+            $errors = array_merge($errors, $pluginerrors);
         }
+
         return $errors;
     }
 
@@ -925,4 +915,30 @@ abstract class question_edit_form extends question_wizard_form {
         return $this->editoroptions;
     }
 
+    /**
+     * Returns contexts related to the question edited
+     *
+     * @return \core_question\local\bank\question_edit_contexts
+     */
+    public function get_contexts(): \core_question\local\bank\question_edit_contexts {
+        return $this->contexts;
+    }
+
+    /**
+     * Returns question object.
+     *
+     * @return \StdClass
+     */
+    public function get_question(): \StdClass {
+        return $this->question;
+    }
+
+    /**
+     * Returns form category object.
+     *
+     * @return \StdClass
+     */
+    public function get_category(): \StdClass {
+        return $this->category;
+    }
 }
